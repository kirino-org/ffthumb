/* automatically generated by rust-bindgen 0.63.0 */

pub const _INTTYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 36;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2usize] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2usize] = b"l\0";
pub const PRId8: &[u8; 2usize] = b"d\0";
pub const PRId16: &[u8; 2usize] = b"d\0";
pub const PRId32: &[u8; 2usize] = b"d\0";
pub const PRId64: &[u8; 3usize] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &[u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &[u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &[u8; 3usize] = b"ld\0";
pub const PRIdFAST8: &[u8; 2usize] = b"d\0";
pub const PRIdFAST16: &[u8; 3usize] = b"ld\0";
pub const PRIdFAST32: &[u8; 3usize] = b"ld\0";
pub const PRIdFAST64: &[u8; 3usize] = b"ld\0";
pub const PRIi8: &[u8; 2usize] = b"i\0";
pub const PRIi16: &[u8; 2usize] = b"i\0";
pub const PRIi32: &[u8; 2usize] = b"i\0";
pub const PRIi64: &[u8; 3usize] = b"li\0";
pub const PRIiLEAST8: &[u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &[u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &[u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &[u8; 3usize] = b"li\0";
pub const PRIiFAST8: &[u8; 2usize] = b"i\0";
pub const PRIiFAST16: &[u8; 3usize] = b"li\0";
pub const PRIiFAST32: &[u8; 3usize] = b"li\0";
pub const PRIiFAST64: &[u8; 3usize] = b"li\0";
pub const PRIo8: &[u8; 2usize] = b"o\0";
pub const PRIo16: &[u8; 2usize] = b"o\0";
pub const PRIo32: &[u8; 2usize] = b"o\0";
pub const PRIo64: &[u8; 3usize] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &[u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &[u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &[u8; 3usize] = b"lo\0";
pub const PRIoFAST8: &[u8; 2usize] = b"o\0";
pub const PRIoFAST16: &[u8; 3usize] = b"lo\0";
pub const PRIoFAST32: &[u8; 3usize] = b"lo\0";
pub const PRIoFAST64: &[u8; 3usize] = b"lo\0";
pub const PRIu8: &[u8; 2usize] = b"u\0";
pub const PRIu16: &[u8; 2usize] = b"u\0";
pub const PRIu32: &[u8; 2usize] = b"u\0";
pub const PRIu64: &[u8; 3usize] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &[u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &[u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &[u8; 3usize] = b"lu\0";
pub const PRIuFAST8: &[u8; 2usize] = b"u\0";
pub const PRIuFAST16: &[u8; 3usize] = b"lu\0";
pub const PRIuFAST32: &[u8; 3usize] = b"lu\0";
pub const PRIuFAST64: &[u8; 3usize] = b"lu\0";
pub const PRIx8: &[u8; 2usize] = b"x\0";
pub const PRIx16: &[u8; 2usize] = b"x\0";
pub const PRIx32: &[u8; 2usize] = b"x\0";
pub const PRIx64: &[u8; 3usize] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &[u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &[u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &[u8; 3usize] = b"lx\0";
pub const PRIxFAST8: &[u8; 2usize] = b"x\0";
pub const PRIxFAST16: &[u8; 3usize] = b"lx\0";
pub const PRIxFAST32: &[u8; 3usize] = b"lx\0";
pub const PRIxFAST64: &[u8; 3usize] = b"lx\0";
pub const PRIX8: &[u8; 2usize] = b"X\0";
pub const PRIX16: &[u8; 2usize] = b"X\0";
pub const PRIX32: &[u8; 2usize] = b"X\0";
pub const PRIX64: &[u8; 3usize] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &[u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &[u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &[u8; 3usize] = b"lX\0";
pub const PRIXFAST8: &[u8; 2usize] = b"X\0";
pub const PRIXFAST16: &[u8; 3usize] = b"lX\0";
pub const PRIXFAST32: &[u8; 3usize] = b"lX\0";
pub const PRIXFAST64: &[u8; 3usize] = b"lX\0";
pub const PRIdMAX: &[u8; 3usize] = b"ld\0";
pub const PRIiMAX: &[u8; 3usize] = b"li\0";
pub const PRIoMAX: &[u8; 3usize] = b"lo\0";
pub const PRIuMAX: &[u8; 3usize] = b"lu\0";
pub const PRIxMAX: &[u8; 3usize] = b"lx\0";
pub const PRIXMAX: &[u8; 3usize] = b"lX\0";
pub const PRIdPTR: &[u8; 3usize] = b"ld\0";
pub const PRIiPTR: &[u8; 3usize] = b"li\0";
pub const PRIoPTR: &[u8; 3usize] = b"lo\0";
pub const PRIuPTR: &[u8; 3usize] = b"lu\0";
pub const PRIxPTR: &[u8; 3usize] = b"lx\0";
pub const PRIXPTR: &[u8; 3usize] = b"lX\0";
pub const SCNd8: &[u8; 4usize] = b"hhd\0";
pub const SCNd16: &[u8; 3usize] = b"hd\0";
pub const SCNd32: &[u8; 2usize] = b"d\0";
pub const SCNd64: &[u8; 3usize] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &[u8; 3usize] = b"ld\0";
pub const SCNdFAST8: &[u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3usize] = b"ld\0";
pub const SCNdFAST32: &[u8; 3usize] = b"ld\0";
pub const SCNdFAST64: &[u8; 3usize] = b"ld\0";
pub const SCNi8: &[u8; 4usize] = b"hhi\0";
pub const SCNi16: &[u8; 3usize] = b"hi\0";
pub const SCNi32: &[u8; 2usize] = b"i\0";
pub const SCNi64: &[u8; 3usize] = b"li\0";
pub const SCNiLEAST8: &[u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &[u8; 3usize] = b"li\0";
pub const SCNiFAST8: &[u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3usize] = b"li\0";
pub const SCNiFAST32: &[u8; 3usize] = b"li\0";
pub const SCNiFAST64: &[u8; 3usize] = b"li\0";
pub const SCNu8: &[u8; 4usize] = b"hhu\0";
pub const SCNu16: &[u8; 3usize] = b"hu\0";
pub const SCNu32: &[u8; 2usize] = b"u\0";
pub const SCNu64: &[u8; 3usize] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &[u8; 3usize] = b"lu\0";
pub const SCNuFAST8: &[u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3usize] = b"lu\0";
pub const SCNuFAST32: &[u8; 3usize] = b"lu\0";
pub const SCNuFAST64: &[u8; 3usize] = b"lu\0";
pub const SCNo8: &[u8; 4usize] = b"hho\0";
pub const SCNo16: &[u8; 3usize] = b"ho\0";
pub const SCNo32: &[u8; 2usize] = b"o\0";
pub const SCNo64: &[u8; 3usize] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &[u8; 3usize] = b"lo\0";
pub const SCNoFAST8: &[u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &[u8; 3usize] = b"lo\0";
pub const SCNoFAST32: &[u8; 3usize] = b"lo\0";
pub const SCNoFAST64: &[u8; 3usize] = b"lo\0";
pub const SCNx8: &[u8; 4usize] = b"hhx\0";
pub const SCNx16: &[u8; 3usize] = b"hx\0";
pub const SCNx32: &[u8; 2usize] = b"x\0";
pub const SCNx64: &[u8; 3usize] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &[u8; 3usize] = b"lx\0";
pub const SCNxFAST8: &[u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3usize] = b"lx\0";
pub const SCNxFAST32: &[u8; 3usize] = b"lx\0";
pub const SCNxFAST64: &[u8; 3usize] = b"lx\0";
pub const SCNdMAX: &[u8; 3usize] = b"ld\0";
pub const SCNiMAX: &[u8; 3usize] = b"li\0";
pub const SCNoMAX: &[u8; 3usize] = b"lo\0";
pub const SCNuMAX: &[u8; 3usize] = b"lu\0";
pub const SCNxMAX: &[u8; 3usize] = b"lx\0";
pub const SCNdPTR: &[u8; 3usize] = b"ld\0";
pub const SCNiPTR: &[u8; 3usize] = b"li\0";
pub const SCNoPTR: &[u8; 3usize] = b"lo\0";
pub const SCNuPTR: &[u8; 3usize] = b"lu\0";
pub const SCNxPTR: &[u8; 3usize] = b"lx\0";
pub type __u_char = ::core::ffi::c_uchar;
pub type __u_short = ::core::ffi::c_ushort;
pub type __u_int = ::core::ffi::c_uint;
pub type __u_long = ::core::ffi::c_ulong;
pub type __int8_t = ::core::ffi::c_schar;
pub type __uint8_t = ::core::ffi::c_uchar;
pub type __int16_t = ::core::ffi::c_short;
pub type __uint16_t = ::core::ffi::c_ushort;
pub type __int32_t = ::core::ffi::c_int;
pub type __uint32_t = ::core::ffi::c_uint;
pub type __int64_t = ::core::ffi::c_long;
pub type __uint64_t = ::core::ffi::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::core::ffi::c_long;
pub type __u_quad_t = ::core::ffi::c_ulong;
pub type __intmax_t = ::core::ffi::c_long;
pub type __uintmax_t = ::core::ffi::c_ulong;
pub type __dev_t = ::core::ffi::c_ulong;
pub type __uid_t = ::core::ffi::c_uint;
pub type __gid_t = ::core::ffi::c_uint;
pub type __ino_t = ::core::ffi::c_ulong;
pub type __ino64_t = ::core::ffi::c_ulong;
pub type __mode_t = ::core::ffi::c_uint;
pub type __nlink_t = ::core::ffi::c_ulong;
pub type __off_t = ::core::ffi::c_long;
pub type __off64_t = ::core::ffi::c_long;
pub type __pid_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
  pub __val: [::core::ffi::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
  const UNINIT: ::core::mem::MaybeUninit<__fsid_t> = ::core::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::core::mem::size_of::<__fsid_t>(),
    8usize,
    concat!("Size of: ", stringify!(__fsid_t))
  );
  assert_eq!(
    ::core::mem::align_of::<__fsid_t>(),
    4usize,
    concat!("Alignment of ", stringify!(__fsid_t))
  );
  assert_eq!(
    unsafe { ::core::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__fsid_t),
      "::",
      stringify!(__val)
    )
  );
}
pub type __clock_t = ::core::ffi::c_long;
pub type __rlim_t = ::core::ffi::c_ulong;
pub type __rlim64_t = ::core::ffi::c_ulong;
pub type __id_t = ::core::ffi::c_uint;
pub type __time_t = ::core::ffi::c_long;
pub type __useconds_t = ::core::ffi::c_uint;
pub type __suseconds_t = ::core::ffi::c_long;
pub type __suseconds64_t = ::core::ffi::c_long;
pub type __daddr_t = ::core::ffi::c_int;
pub type __key_t = ::core::ffi::c_int;
pub type __clockid_t = ::core::ffi::c_int;
pub type __timer_t = *mut ::core::ffi::c_void;
pub type __blksize_t = ::core::ffi::c_long;
pub type __blkcnt_t = ::core::ffi::c_long;
pub type __blkcnt64_t = ::core::ffi::c_long;
pub type __fsblkcnt_t = ::core::ffi::c_ulong;
pub type __fsblkcnt64_t = ::core::ffi::c_ulong;
pub type __fsfilcnt_t = ::core::ffi::c_ulong;
pub type __fsfilcnt64_t = ::core::ffi::c_ulong;
pub type __fsword_t = ::core::ffi::c_long;
pub type __ssize_t = ::core::ffi::c_long;
pub type __syscall_slong_t = ::core::ffi::c_long;
pub type __syscall_ulong_t = ::core::ffi::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::core::ffi::c_char;
pub type __intptr_t = ::core::ffi::c_long;
pub type __socklen_t = ::core::ffi::c_uint;
pub type __sig_atomic_t = ::core::ffi::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::core::ffi::c_schar;
pub type int_fast16_t = ::core::ffi::c_long;
pub type int_fast32_t = ::core::ffi::c_long;
pub type int_fast64_t = ::core::ffi::c_long;
pub type uint_fast8_t = ::core::ffi::c_uchar;
pub type uint_fast16_t = ::core::ffi::c_ulong;
pub type uint_fast32_t = ::core::ffi::c_ulong;
pub type uint_fast64_t = ::core::ffi::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
  pub quot: ::core::ffi::c_long,
  pub rem: ::core::ffi::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
  const UNINIT: ::core::mem::MaybeUninit<imaxdiv_t> = ::core::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::core::mem::size_of::<imaxdiv_t>(),
    16usize,
    concat!("Size of: ", stringify!(imaxdiv_t))
  );
  assert_eq!(
    ::core::mem::align_of::<imaxdiv_t>(),
    8usize,
    concat!("Alignment of ", stringify!(imaxdiv_t))
  );
  assert_eq!(
    unsafe { ::core::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(imaxdiv_t),
      "::",
      stringify!(quot)
    )
  );
  assert_eq!(
    unsafe { ::core::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(imaxdiv_t),
      "::",
      stringify!(rem)
    )
  );
}
extern "C" {
  pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
  pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
  pub fn strtoimax(
    __nptr: *const ::core::ffi::c_char,
    __endptr: *mut *mut ::core::ffi::c_char,
    __base: ::core::ffi::c_int,
  ) -> intmax_t;
}
extern "C" {
  pub fn strtoumax(
    __nptr: *const ::core::ffi::c_char,
    __endptr: *mut *mut ::core::ffi::c_char,
    __base: ::core::ffi::c_int,
  ) -> uintmax_t;
}
extern "C" {
  pub fn wcstoimax(
    __nptr: *const __gwchar_t,
    __endptr: *mut *mut __gwchar_t,
    __base: ::core::ffi::c_int,
  ) -> intmax_t;
}
extern "C" {
  pub fn wcstoumax(
    __nptr: *const __gwchar_t,
    __endptr: *mut *mut __gwchar_t,
    __base: ::core::ffi::c_int,
  ) -> uintmax_t;
}
pub const ThumbnailerImageTypeEnum_Png: ThumbnailerImageTypeEnum = 0;
pub const ThumbnailerImageTypeEnum_Jpeg: ThumbnailerImageTypeEnum = 1;
pub const ThumbnailerImageTypeEnum_Rgb: ThumbnailerImageTypeEnum = 2;
pub const ThumbnailerImageTypeEnum_Unknown: ThumbnailerImageTypeEnum = 3;
pub type ThumbnailerImageTypeEnum = ::core::ffi::c_uint;
pub use self::ThumbnailerImageTypeEnum as ThumbnailerImageType;
pub const ThumbnailerLogLevelEnum_ThumbnailerLogLevelInfo: ThumbnailerLogLevelEnum = 0;
pub const ThumbnailerLogLevelEnum_ThumbnailerLogLevelError: ThumbnailerLogLevelEnum = 1;
pub type ThumbnailerLogLevelEnum = ::core::ffi::c_uint;
pub use self::ThumbnailerLogLevelEnum as ThumbnailerLogLevel;
pub const ThumbnailerImageSource_ThumbnailerImageSourceVideoStream:
  ThumbnailerImageSource = 0;
pub const ThumbnailerImageSource_ThumbnailerImageSourceMetadata: ThumbnailerImageSource =
  1;
pub type ThumbnailerImageSource = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVFormatContext {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thumbnailer_data {
  _unused: [u8; 0],
}
pub type thumbnailer_log_callback = ::core::option::Option<
  unsafe extern "C" fn(arg1: ThumbnailerLogLevel, arg2: *const ::core::ffi::c_char),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct video_thumbnailer_struct {
  pub thumbnail_size: ::core::ffi::c_int,
  pub seek_percentage: ::core::ffi::c_int,
  pub seek_time: *mut ::core::ffi::c_char,
  pub overlay_film_strip: ::core::ffi::c_int,
  pub workaround_bugs: ::core::ffi::c_int,
  pub thumbnail_image_quality: ::core::ffi::c_int,
  pub thumbnail_image_type: ThumbnailerImageType,
  pub av_format_context: *mut AVFormatContext,
  pub maintain_aspect_ratio: ::core::ffi::c_int,
  pub prefer_embedded_metadata: ::core::ffi::c_int,
  pub tdata: *mut thumbnailer_data,
}
#[test]
fn bindgen_test_layout_video_thumbnailer_struct() {
  const UNINIT: ::core::mem::MaybeUninit<video_thumbnailer_struct> =
    ::core::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::core::mem::size_of::<video_thumbnailer_struct>(),
    56usize,
    concat!("Size of: ", stringify!(video_thumbnailer_struct))
  );
  assert_eq!(
    ::core::mem::align_of::<video_thumbnailer_struct>(),
    8usize,
    concat!("Alignment of ", stringify!(video_thumbnailer_struct))
  );
  assert_eq!(
    unsafe { ::core::ptr::addr_of!((*ptr).thumbnail_size) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(video_thumbnailer_struct),
      "::",
      stringify!(thumbnail_size)
    )
  );
  assert_eq!(
    unsafe { ::core::ptr::addr_of!((*ptr).seek_percentage) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(video_thumbnailer_struct),
      "::",
      stringify!(seek_percentage)
    )
  );
  assert_eq!(
    unsafe { ::core::ptr::addr_of!((*ptr).seek_time) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(video_thumbnailer_struct),
      "::",
      stringify!(seek_time)
    )
  );
  assert_eq!(
    unsafe { ::core::ptr::addr_of!((*ptr).overlay_film_strip) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(video_thumbnailer_struct),
      "::",
      stringify!(overlay_film_strip)
    )
  );
  assert_eq!(
    unsafe { ::core::ptr::addr_of!((*ptr).workaround_bugs) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(video_thumbnailer_struct),
      "::",
      stringify!(workaround_bugs)
    )
  );
  assert_eq!(
    unsafe {
      ::core::ptr::addr_of!((*ptr).thumbnail_image_quality) as usize - ptr as usize
    },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(video_thumbnailer_struct),
      "::",
      stringify!(thumbnail_image_quality)
    )
  );
  assert_eq!(
    unsafe { ::core::ptr::addr_of!((*ptr).thumbnail_image_type) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(video_thumbnailer_struct),
      "::",
      stringify!(thumbnail_image_type)
    )
  );
  assert_eq!(
    unsafe { ::core::ptr::addr_of!((*ptr).av_format_context) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(video_thumbnailer_struct),
      "::",
      stringify!(av_format_context)
    )
  );
  assert_eq!(
    unsafe {
      ::core::ptr::addr_of!((*ptr).maintain_aspect_ratio) as usize - ptr as usize
    },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(video_thumbnailer_struct),
      "::",
      stringify!(maintain_aspect_ratio)
    )
  );
  assert_eq!(
    unsafe {
      ::core::ptr::addr_of!((*ptr).prefer_embedded_metadata) as usize - ptr as usize
    },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(video_thumbnailer_struct),
      "::",
      stringify!(prefer_embedded_metadata)
    )
  );
  assert_eq!(
    unsafe { ::core::ptr::addr_of!((*ptr).tdata) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(video_thumbnailer_struct),
      "::",
      stringify!(tdata)
    )
  );
}
pub type video_thumbnailer = video_thumbnailer_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct image_data_struct {
  pub image_data_ptr: *mut u8,
  pub image_data_size: ::core::ffi::c_int,
  pub image_data_width: ::core::ffi::c_int,
  pub image_data_height: ::core::ffi::c_int,
  pub image_data_source: ThumbnailerImageSource,
  pub internal_data: *mut ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout_image_data_struct() {
  const UNINIT: ::core::mem::MaybeUninit<image_data_struct> =
    ::core::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::core::mem::size_of::<image_data_struct>(),
    32usize,
    concat!("Size of: ", stringify!(image_data_struct))
  );
  assert_eq!(
    ::core::mem::align_of::<image_data_struct>(),
    8usize,
    concat!("Alignment of ", stringify!(image_data_struct))
  );
  assert_eq!(
    unsafe { ::core::ptr::addr_of!((*ptr).image_data_ptr) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(image_data_struct),
      "::",
      stringify!(image_data_ptr)
    )
  );
  assert_eq!(
    unsafe { ::core::ptr::addr_of!((*ptr).image_data_size) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(image_data_struct),
      "::",
      stringify!(image_data_size)
    )
  );
  assert_eq!(
    unsafe { ::core::ptr::addr_of!((*ptr).image_data_width) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(image_data_struct),
      "::",
      stringify!(image_data_width)
    )
  );
  assert_eq!(
    unsafe { ::core::ptr::addr_of!((*ptr).image_data_height) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(image_data_struct),
      "::",
      stringify!(image_data_height)
    )
  );
  assert_eq!(
    unsafe { ::core::ptr::addr_of!((*ptr).image_data_source) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(image_data_struct),
      "::",
      stringify!(image_data_source)
    )
  );
  assert_eq!(
    unsafe { ::core::ptr::addr_of!((*ptr).internal_data) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(image_data_struct),
      "::",
      stringify!(internal_data)
    )
  );
}
pub type image_data = image_data_struct;
extern "C" {
  pub fn video_thumbnailer_create() -> *mut video_thumbnailer;
}
extern "C" {
  pub fn video_thumbnailer_destroy(thumbnailer: *mut video_thumbnailer);
}
extern "C" {
  pub fn video_thumbnailer_create_image_data() -> *mut image_data;
}
extern "C" {
  pub fn video_thumbnailer_destroy_image_data(data: *mut image_data);
}
extern "C" {
  pub fn video_thumbnailer_generate_thumbnail_to_buffer(
    thumbnailer: *mut video_thumbnailer,
    movie_filename: *const ::core::ffi::c_char,
    generated_image_data: *mut image_data,
  ) -> ::core::ffi::c_int;
}
extern "C" {
  pub fn video_thumbnailer_generate_thumbnail_to_file(
    thumbnailer: *mut video_thumbnailer,
    movie_filename: *const ::core::ffi::c_char,
    output_fileName: *const ::core::ffi::c_char,
  ) -> ::core::ffi::c_int;
}
extern "C" {
  pub fn video_thumbnailer_set_log_callback(
    thumbnailer: *mut video_thumbnailer,
    cb: thumbnailer_log_callback,
  );
}
extern "C" {
  pub fn video_thumbnailer_set_size(
    thumbnailer: *mut video_thumbnailer,
    width: ::core::ffi::c_int,
    height: ::core::ffi::c_int,
  ) -> ::core::ffi::c_int;
}
